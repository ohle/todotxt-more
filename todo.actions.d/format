#!/bin/bash

#install this in the .todo.actions.d folder of your todo.txt CLI install.

WORD_REGEX="[[:alnum:]]+"

action=$1
shift

[ -z "$OPEN_ISSUE_URL" ] && OPEN_ISSUE_URL=xdg-open

[ "$action" = "usage" ] && {
  echo "  Format/recolor output:"
  echo "    format [ansi|pango|html|markdown|slack] [ACTIONS]"
  echo "      run command and recolor using ansi, pango, html, markdown, or slack's markdown variant"
  echo "    format [ansi|pango|html|markdown|slack] stdin"
  echo "      reads from standard input"
  echo ""
  exit
}


mode=ansi
case $1 in
    ansi)
        shift
        ;;
    pango)
        mode=pango
        shift
        ;;
    html)
        mode=html
        shift
        ;;
    markdown)
        mode=markdown
        shift
        ;;
    slack)
        mode=slack
        shift
        ;;
esac

PANGO_MARKUP_LINENO='<small><small><span fgcolor="black">\1<\/span><\/small><\/small>'
PANGO_MARKUP_PRIORITY_A='<b><span fgcolor="red">\1<\/span><\/b>'
PANGO_MARKUP_PRIORITY_B='<b><span fgcolor="orange">\1<\/span><\/b>'
PANGO_MARKUP_PRIORITY_C='<b><span fgcolor="yellow">\1<\/span><\/b>'
PANGO_MARKUP_PRIORITY_D='<b><span fgcolor="blue">\1<\/span><\/b>'
PANGO_MARKUP_PROJECT='<span fgcolor="darkcyan"><b>\1<\/b><\/span>'
PANGO_MARKUP_CONTEXT='<span fgcolor="darkmagenta"><b>\1<\/b><\/span>'
PANGO_MARKUP_TAG='<span fgcolor="darkgreen"><b>\1<\/b><\/span>'
PANGO_MARKUP_ISSUE='<small><span fgcolor="blue"><b>\1<\/b><\/span><\/small>'
PANGO_MARKUP_NOTMUCH='<small><span fgcolor="gray"><b>\1<\/b><\/span><\/small>'
PANGO_MARKUP_UPDATED='<small><span fgcolor="gray"><b>\1<\/b><\/span><\/small>'
PANGO_MARKUP_DUETODAY='<span fgcolor="red"><b>today<\/b><\/span>'
PANGO_MARKUP_DUE='<small><span fgcolor="yellow"><b>\1<\/b><\/span><\/small>'
PANGO_MARKUP_RELTIME='<span fgcolor="gray"><i>\1<\/i><\/span>'
PANGO_MARKUP_DONE='<s><span fgcolor="gray">\1<\/span><\/s>'

ANSI_MARKUP_LINENO='\o033[37;2m\1\o033[0m'
ANSI_MARKUP_PRIORITY_A='\o033[31;1m\1\o033[0m'
ANSI_MARKUP_PRIORITY_B='\o033[91;1m\1\o033[0m'
ANSI_MARKUP_PRIORITY_C='\o033[33;1m\1\o033[0m'
ANSI_MARKUP_PRIORITY_D='\o033[34;1m\1\o033[0m'
ANSI_MARKUP_PROJECT='\o033[36;1m\1\o033[0m'
ANSI_MARKUP_CONTEXT='\o033[35;2m\1\o033[0m'
ANSI_MARKUP_TAG='\o033[32;2m\1\o033[0m'
ANSI_MARKUP_ISSUE='\o033[34;2m\1\o033[0m'
ANSI_MARKUP_NOTMUCH='\o033[37;2m\1\o033[0m'
ANSI_MARKUP_UPDATED='\o033[37;2m\1\o033[0m'
ANSI_MARKUP_DUETODAY='\o033[31;1mdue:today\o033[0m'
ANSI_MARKUP_DUE='\o033[33;1m\1\o033[0m'
ANSI_MARKUP_RELTIME='\o033[37;2m\1\o033[0m'
ANSI_MARKUP_DONE='\o033[37;2;9m\1\o033[0m'

HTML_HEAD="<html>
<head>
 <meta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"/>
</head>
<style type=\"text/css\">
body { background: white; font-family: sans-serif; font-size: 12px; }
.lineno { color: darkgray; font-family: monospace; }
.prioa { color: red; font-weight: bold; }
.priob { color: orange; font-weight: bold; }
.prioc { color: darkgoldenrod; font-weight: bold;  }
.priod { color: blue; font-weight: bold;  }
.project { color: darkcyan; font-weight: bold;  }
.context { color: darkmagenta; }
.tag { color: darkgreen; }
.issue { color: blue; }
.notmuch { color: darkgray; }
.updated { color: darkgray; }
.duetoday { color: red; font-weight: bold; }
.due { color: darkgoldenrod; }
.reltime { color: dimgray; }
.done { color: dimgray; }
</style>
<body>
<ul>"

HTML_FOOT="</ul></body></html>"

HTML_MARKUP_LINENO='<span class="lineno">\1<\/span>'
HTML_MARKUP_PRIORITY_A='<span class="prioa">\1<\/span>'
HTML_MARKUP_PRIORITY_B='<span class="priob">\1<\/span>'
HTML_MARKUP_PRIORITY_C='<span class="prioc">\1<\/span>'
HTML_MARKUP_PRIORITY_D='<span class="priod">\1<\/span>'
HTML_MARKUP_PROJECT='<span class="project">\1<\/span>'
HTML_MARKUP_CONTEXT='<span class="context">\1<\/span>'
HTML_MARKUP_TAG='<span class="tag">\1<\/span>'
HTML_MARKUP_DUE='<span class="due">\1<\/span>'
HTML_MARKUP_DUETODAY='<span class="duetoday">due:today<\/span>'
HTML_MARKUP_ISSUE='<span class="issue">issue:<a href="\1">\1<\/a><\/span>'
HTML_MARKUP_NOTMUCH='<span class="notmuch">\1<\/span>'
HTML_MARKUP_UPDATED='<span class="updated">\1<\/span>'
HTML_MARKUP_RELTIME='<span class="reltime">\1<\/span>'
HTML_MARKUP_DONE='<span class="done">\1<\/span>'

MD_MARKUP_LINENO='`\1`'
MD_MARKUP_PRIORITY_A='\*\*\1\*\*'
MD_MARKUP_PRIORITY_B='\*\*\1\*\*'
MD_MARKUP_PRIORITY_C='\*\*\1\*\*'
MD_MARKUP_PRIORITY_D='\*\*\1\*\*'
MD_MARKUP_PROJECT='\*\*\1\*\*'
MD_MARKUP_CONTEXT='\*\1\*'
MD_MARKUP_TAG='`\1\`'
MD_MARKUP_DUE='\1'
MD_MARKUP_DUETODAY='\*\*due:today\!\!\*\*'
MD_MARKUP_ISSUE='`issue:`\[\1\]\(\1\)'
MD_MARKUP_NOTMUCH='`\1`'
MD_MARKUP_UPDATED='`\1`'
MD_MARKUP_RELTIME='*\1*'
MD_MARKUP_DONE='~~\1~~'

SLACK_MARKUP_LINENO=''
SLACK_MARKUP_PRIORITY_A='\*\1\*'
SLACK_MARKUP_PRIORITY_B='\*\1\*'
SLACK_MARKUP_PRIORITY_C='\*\1\*'
SLACK_MARKUP_PRIORITY_D='\*\1\*'
SLACK_MARKUP_PROJECT='\*\1\*'
SLACK_MARKUP_CONTEXT='_\1_'
SLACK_MARKUP_TAG='`\1\`'
SLACK_MARKUP_DUE='\1'
SLACK_MARKUP_DUETODAY='\*due:today!\*'
SLACK_MARKUP_ISSUE='`issue:`\[\1\]\(\1\)'
SLACK_MARKUP_NOTMUCH='`\1`'
SLACK_MARKUP_UPDATED='`\1`'
SLACK_MARKUP_RELTIME='_\1_'
SLACK_MARKUP_DONE='~\1~'


[ "$mode" == "html" ] && echo "$HTML_HEAD"

TODAY="$(date +%Y-%m-%d)"

if [ "$1" = "stdin" ]; then cat; else todo.sh -p "$@"; fi | while read line; do
    if echo "$line" | grep -qE "^[[:digit:]]+ x .*"; then
        case $mode in
            ansi)
                echo -e "${line}" | sed -r "s/^([[:digit:]]+ x .*)/${ANSI_MARKUP_DONE}/g"
                ;;
            pango)
                echo -e "${line}" | sed -r "s/^([[:digit:]]+ x .*)/${PANGO_MARKUP_DONE}/g"
                ;;
            html)
                echo -e "${line}" | sed -r "s/^([[:digit:]]+ x .*)/${HTML_MARKUP_DONE}/g"
                ;;
            markdown)
                echo -e "${line}" | sed -r "s/^([[:digit:]]+ x .*)/${MD_MARKUP_DONE}/g"
                ;;
            slack)
                echo -e "${line}" | sed -r "s/^([[:digit:]]+ x .*)/${MD_MARKUP_DONE}/g"
                ;;
        esac
    else
        case $mode in
            ansi)
                echo -e "${line}" | sed -r "
                    s/^([[:digit:]]+ )/${ANSI_MARKUP_LINENO}/g;
                    s/([[:digit:]]+d\+? )/${ANSI_MARKUP_RELTIME}/g;
                    s/(\(A\))/${ANSI_MARKUP_PRIORITY_A}/g;
                    s/(\(B\))/${ANSI_MARKUP_PRIORITY_B}/g;
                    s/(\(C\))/${ANSI_MARKUP_PRIORITY_C}/g;
                    s/(\(D\))/${ANSI_MARKUP_PRIORITY_D}/g;
                    s/(\+${WORD_REGEX})/${ANSI_MARKUP_PROJECT}/g;
                    s/(\#${WORD_REGEX})/${ANSI_MARKUP_TAG}/g;
                    s/(issue:https?:\/\/[^[:blank:]]*)/${ANSI_MARKUP_ISSUE}/g;
                    s/(notmuch:[a-z0-9]+)/${ANSI_MARKUP_NOTMUCH}/g;
                    s/((created|updated|ics|end):[^[:blank:]]*)/${ANSI_MARKUP_UPDATED}/g;
                    s/(\@${WORD_REGEX})/${ANSI_MARKUP_CONTEXT}/g;
                    s/(due\:${TODAY})/${ANSI_MARKUP_DUETODAY}/g;
                    s/(due\:[\:0-9T\-]+)/${ANSI_MARKUP_DUE}/g"
            ;;
            pango)
                echo -e "${line}" | sed -r "
                    s/^([[:digit:]]+ x .*)$/${PANGO_MARKUP_DONE}/g;
                    s/([[:digit:]]+d\+? )/${PANGO_MARKUP_RELTIME}/g;
                    s/^([[:digit:]]+ )/${PANGO_MARKUP_LINENO}/g;
                    s/(\(A\))/${PANGO_MARKUP_PRIORITY_A}/g;
                    s/(\(B\))/${PANGO_MARKUP_PRIORITY_B}/g;
                    s/(\(C\))/${PANGO_MARKUP_PRIORITY_C}/g;
                    s/(\(D\))/${PANGO_MARKUP_PRIORITY_D}/g;
                    s/(\+${WORD_REGEX})/${PANGO_MARKUP_PROJECT}/g;
                    s/(\#${WORD_REGEX})/${PANGO_MARKUP_TAG}/g;
                    s/(issue:https?:\/\/[^[:blank:]]*)/${PANGO_MARKUP_ISSUE}/g;
                    s/(notmuch:[a-z0-9]+)/${PANGO_MARKUP_NOTMUCH}/g;
                    s/((created|updated|ics|end):[^[:blank:]]*)/${PANGO_MARKUP_UPDATED}/g;
                    s/(\@${WORD_REGEX})/${PANGO_MARKUP_CONTEXT}/g;
                    s/(due\:$TODAY)/${PANGO_MARKUP_DUETODAY}/g;
                    s/(due\:[\:0-9T\-]+)/${PANGO_MARKUP_DUE}/g"
            ;;
            html)
                echo "<li>"
                echo -e "${line}" | sed -r "
                    s/^([[:digit:]]+ x .*)$/${HTML_MARKUP_DONE}/g;
                    s/([[:digit:]]+d\+? )/${HTML_MARKUP_RELTIME}/g;
                    s/^([[:digit:]]+ )/${HTML_MARKUP_LINENO}/g;
                    s/(\(A\))/${HTML_MARKUP_PRIORITY_A}/g;
                    s/(\(B\))/${HTML_MARKUP_PRIORITY_B}/g;
                    s/(\(C\))/${HTML_MARKUP_PRIORITY_C}/g;
                    s/(\(D\))/${HTML_MARKUP_PRIORITY_D}/g;
                    s/(\+${WORD_REGEX})/${HTML_MARKUP_PROJECT}/g;
                    s/(\#${WORD_REGEX})/${HTML_MARKUP_TAG}/g;
                    s/issue:(https?:\/\/[^[:blank:]]*)/${HTML_MARKUP_ISSUE}/g;
                    s/(notmuch:[a-z0-9]+)/${HTML_MARKUP_NOTMUCH}/g;
                    s/((created|updated|ics|end):[^[:blank:]]*)/${HTML_MARKUP_UPDATED}/g;
                    s/(\@${WORD_REGEX})/${HTML_MARKUP_CONTEXT}/g;
                    s/(due\:$TODAY)/${HTML_MARKUP_DUETODAY}/g;
                    s/(due\:[\:0-9T\-\:]+)/${HTML_MARKUP_DUE}/g"
                echo "</li>"
            ;;
            markdown)
                echo -n "* "
                echo -e "${line}" | sed -r "
                    s/^([[:digit:]]+ x .*)$/${MD_MARKUP_DONE}/g;
                    s/([[:digit:]]+d\+?) /${MD_MARKUP_RELTIME} /g;
                    s/^([[:digit:]]+) /${MD_MARKUP_LINENO} /g;
                    s/(\(A\))/${MD_MARKUP_PRIORITY_A}/g;
                    s/(\(B\))/${MD_MARKUP_PRIORITY_B}/g;
                    s/(\(C\))/${MD_MARKUP_PRIORITY_C}/g;
                    s/(\(D\))/${MD_MARKUP_PRIORITY_D}/g;
                    s/(\+${WORD_REGEX})/${MD_MARKUP_PROJECT}/g;
                    s/(\#${WORD_REGEX})/${MD_MARKUP_TAG}/g;
                    s/issue:(https?:\/\/[^[:blank:]]*)/${MD_MARKUP_ISSUE}/g;
                    s/(notmuch:[a-z0-9]+)/${MD_MARKUP_NOTMUCH}/g;
                    s/((created|updated|ics|end):[^[:blank:]]*)/${MD_MARKUP_UPDATED}/g;
                    s/(\@${WORD_REGEX})/${MD_MARKUP_CONTEXT}/g;
                    s/(due\:$TODAY)/${MD_MARKUP_DUETODAY}/g;
                    s/(due\:[\:0-9T\-]+)/${MD_MARKUP_DUE}/g"
            ;;
            slack)
                echo -n "* "
                echo -e "${line}" | sed -r "
                    s/^([[:digit:]]+ x .*)$/${SLACK_MARKUP_DONE}/g;
                    s/([[:digit:]]+d\+?) /${SLACK_MARKUP_RELTIME} /g;
                    s/^([[:digit:]]+ )/${SLACK_MARKUP_LINENO}/g;
                    s/(\(A\))/${SLACK_MARKUP_PRIORITY_A}/g;
                    s/(\(B\))/${SLACK_MARKUP_PRIORITY_B}/g;
                    s/(\(C\))/${SLACK_MARKUP_PRIORITY_C}/g;
                    s/(\(D\))/${SLACK_MARKUP_PRIORITY_D}/g;
                    s/(\+${WORD_REGEX})/${SLACK_MARKUP_PROJECT}/g;
                    s/(\@${WORD_REGEX})/${SLACK_MARKUP_CONTEXT}/g;
                    s/(\#${WORD_REGEX})/${SLACK_MARKUP_TAG}/g;
                    s/issue:(https?:\/\/[^[:blank:]]*)/${SLACK_MARKUP_ISSUE}/g;
                    s/(notmuch:[a-z0-9]+)/${SLACK_MARKUP_NOTMUCH}/g;
                    s/((created|updated|ics|end):[^[:blank:]]*)/${SLACK_MARKUP_UPDATED}/g;
                    s/(due\:$TODAY)/${SLACK_MARKUP_DUETODAY}/g;
                    s/(due\:[\:0-9T\-\:]+)/${SLACK_MARKUP_DUE}/g"
            ;;
            *)
                echo "No such format: $mode">&2
        esac
    fi
done

[ "$mode" == "html" ] && echo "$HTML_FOOT"
